#!/bin/bash

# shellcheck disable=SC1090

read -r -d '' doc <<-EOM
Initializes a new file (TARGET) using a predefined template (TEMPLATE).
The target file can be a new script, configuration file, markup file, etc....
After the target file has been initialized, it is opened for editing using the
system's default editor.
EOM

# ---------- Source Libraries / Configs ----------
# ===== Global Utilities =====
source gutils.sh

[ -d "${MY_XDG_CONFIG}" ] || mkdir -p "${MY_XDG_CONFIG}"

# ===== Configuration File =====
read -r -d '' default_config << "EOM"
# The target file will be initialized in a location relative to this directory
# unless you specify the `-f` option. In which case the target file will be
# initialized relative to the current directory.
#
# Defaults to "./" (the current directory).
ROOT_DIR=

# The target file is initialized in $ROOT_DIR/$DEFAULT_TARGET_DIR
# unless the `-D {DIR}` option is used. In which case the target file will
# be initialized to $ROOT_DIR/{DIR}.
DEFAULT_TARGET_DIR=

# If specified, this command is evaluated after (and if) the target file
# has its executable bit set. This can be used to create symlinks to
# the target file (using `stow`, for example).
#
# The $TARGET variable, which contains the full path of the target file,
# will be injected into the environment of this command.
EXEC_HOOK_CMD=

# The directory used to store cookie templates.
# 
# Defaults to "~/.cookiecutters".
COOKIE_DIR=
EOM

config_file="${MY_XDG_CONFIG}"/config
if [[ -f "${config_file}" ]]; then
    source "${config_file}"
else
    imsg "Configruation file has been initialized."
    echo "${default_config}" > "${config_file}"
fi

# Set default bin directory if not specified in config file.
if [[ -z "${ROOT_DIR}" ]]; then
    ROOT_DIR=./
fi

if [[ -z "${COOKIE_DIR}" ]]; then
    COOKIE_DIR="${HOME}"/.cookiecutters
fi

# ---------- Traps ----------
function exit_handler() {
    EC="$1"; shift

    if [[ "${parent_dir_created}" = true && "${EC}" -ne 0 ]]; then
        dmsg "Removing directory: ${dest_dir}"
        rm -rf "${dest_dir}"
    fi
}

trap 'exit_handler $?' EXIT

# ---------- Function Definitions ----------
function main() {
    parse_args "$@"

    get_dest_dir "${target}" "${force}"

    full_target="${dest_dir}"/"${target}"
    full_template="${COOKIE_DIR}"/"${template}"
    if ! [[ -f "${full_template}" ]]; then
        die "Template does not exist: ${full_template}"
    fi

    # ===== Initialize New Script =====
    # >>> Copy Template Contents to New Script
    if ! [[ -f "${full_target}" ]]; then
        imsg "Initializing the '${full_target}' script."
        cp "${full_template}" "${full_target}"
    else
        imsg "The '${full_target}' script already exists."
        eval "$(editor_cmd "" "NORMAL" "${full_target}")"
        exit 0
    fi
    
    # >>> Make New Script Executable
    if [[ "${executable}" == "y" || "${executable}" == "yes" ]]; then
        sudo chmod +x "${full_target}"
        if [[ -n "${EXEC_HOOK_CMD}" ]]; then
            imsg "Running execute hook: ${EXEC_HOOK_CMD}"
            eval "TARGET=${full_target} ${EXEC_HOOK_CMD}"
        fi
    fi

    contents="$(cat "${full_target}")"
    template_engine "${contents}"
    echo "${new_contents}" > "${full_target}"

    eval "$(editor_cmd "${start_line}" "${mode}" "${full_target}")"
}

function parse_args() {
    eval set -- "$(getopt -o "d,c,D:,e:,f,F:,h,l,N,T:,v,x" -l "config,debug,docs:,bin-subdir:,edit:,help,list,executable:,template:,verbose,use-extension:" -- "$@")"
    
    USAGE="${USAGE} [-c] [-d] [-D TARGET_DIR] [-e TEMPLATE] [-f] [-h] [-l [TEMPLATE]] [-x | --executable={y|n}] [-v] [-T TEMPLATE] TARGET"

    # shellcheck disable=SC2153
    if [[ -n "${EDITOR}" ]]; then
        EDITOR="${EDITOR}"
    else
        EDITOR="vim"
    fi
    
    read -r -d '' help <<-EOM
	${USAGE^}
		
	${doc}
	
	Command-line Options:
	    -d | --debug
	        Enable debug mode.
	
	    -c | --config
	        Edit the configuration file.
	
	    -D DIR | --bin-subdir DIR
	        Initialize TARGET into DIR, which should be a subdirectory of the
	        default bin directory (see the configuration file).
	
	    -e TEMPLATE | --edit TEMPLATE
	        Add / edit cookie template.
	
	    --executable={y|n}
	        Make TARGET executable. Defaults to 'n'.
	
	    -f | --force
	        Force TARGET initialization to be relative to the current
	        directory.
	
	    -h | --help
	        View this help message.
	
	    -l [TEMPLATE] | --list [TEMPLATE]
	        If TEMPLATE is provided, output template contents to STDOUT.
	        Otherwise, list available templates. 
	
	    -T TEMPLATE | --template TEMPLATE
	        The name of the template (e.g. mytemplate.sh).
	
	    -x
	        Equivalent to --executable=y
	
	    -v | --verbose
	        Enable verbose output.
	EOM
    
    executable="n"
    force=false
    template=
    target=
    debug=false
    verbose=false

    while [[ -n "$1" ]]; do
        case $1 in
           -c|--config )
               "${EDITOR}" "${config_file}"
               exit 0
               ;;
           -d|--debug )
               debug=true
               ;;
           -e|--edit )
               shift
               "${EDITOR}" "${COOKIE_DIR}"/"$1"
               exit 0
               ;;
           -h|--help )
               echo "${help}"
               exit 0
               ;;
           -l|--list )
               list=true
               ;;
           -D|--bin-subdir )
               shift
               target_dir="$1"
               ;;
           --docs )
               shift
               eval "printf -- \"\${$1}\n\""
               exit 0 
               ;;
           --executable )
               shift
               executable="$1"
               ;;
           -f )
               force=true
               ;;
           -T|--template )
               shift
               template="$1"
               ;;
           -v|--verbose )
               verbose=true
               ;;
           -x )
               executable="y"
               ;;
           -- )
               shift
               break
               ;;
        esac
        shift
    done
    
    if [[ "${debug}" = true && "${verbose}" = true ]]; then
        PS4='$LINENO: '
        set -x
    fi

    if [[ "${list}" = true ]]; then
        if [[ -n "$1" ]]; then
            template="$1"; shift
            full_template="${COOKIE_DIR}"/"${template}"
            [[ -f "${full_template}" ]] || die "Template does not exist: ${full_template}"
            cat "${full_template}"
        else
           for T in "${COOKIE_DIR}"/*; do
               [[ -f "${T}" ]] && basename "${T}"
           done
        fi

       exit 0
    fi

    if [[ -z "$1" ]] || [[ -z "${template}" ]]; then
        die "${USAGE}" 2
    fi
    
    target="$1"; shift
}

function get_dest_dir() {
    target="$1"; shift
    force="$1"; shift

    # ===== Calculate Filesystem Paths =====
    if [[ "$PWD" == "${ROOT_DIR}"/* && -z "${target_dir}" ]] || [[ "${force}" = true ]]; then
        dest_dir="$PWD"
    elif [[ -n "${target_dir}" ]]; then
        dest_dir="${ROOT_DIR}"/"${target_dir}"
    elif [[ -n "${DEFAULT_TARGET_DIR}" ]]; then
        dest_dir="${ROOT_DIR}"/"${DEFAULT_TARGET_DIR}"
    else
        dest_dir="${ROOT_DIR}"
    fi
    
    target_dir="$(dirname "${target}")"

    if [[ "${target_dir}" != "." ]]; then
        dest_dir="${dest_dir}"/"${target_dir}"
        target="$(basename "${target}")"
    fi
    
    if [[ "${dest_dir}" != "./"* ]]; then
        if ! [[ -d "${dest_dir}" ]]; then
            dmsg "Creating directory: ${dest_dir}"
            mkdir -p "${dest_dir}"
            parent_dir_created=true
        fi
    fi
}

function template_engine() {
    old_contents="$1"; shift
    new_contents="${old_contents}"

    # ===== Template Statements and Substitutions =====
    # >>> START HERE
    istart_mark="{% START INSERT MODE %}"
    istart_line="$(get_start_line "${istart_mark}" "${old_contents}")"
    
    nstart_mark="{% START NORMAL MODE %}"
    nstart_line="$(get_start_line "${nstart_mark}" "${old_contents}")"

    contents="${new_contents}"
    new_contents="${contents//\{% START [A-z]* MODE %\}}"
    
    if [[ -n "${istart_line}" ]]; then
        mode="INSERT"
        start_line="${istart_line}"
    elif [[ -n "${nstart_line}" ]]; then
        mode="NORMAL"
        start_line="${nstart_line}"
    fi
    
    # >>> Environment Variable Replacements
    grep_epttrn="{{[ ]*(.*?)[ ]*}}"
    sed_epttrn="{{[ ]*\([^ ]*\)[ ]*}}"
    
    exec 5>&0  # save STDIN
    while read evar; do
        evalue="$(eval "echo \"\$${evar}\"")"
        if [[ -z "${evalue}" ]]; then
            read -p "${evar}: " evalue <&5
            eval "${evar}=${evalue}"
        fi
    
        new_contents="$(echo "${new_contents}" | sed "s/{{[ ]*${evar}[ ]*}}/${evalue}/g")"
        new_contents="$(echo "${new_contents}" | sed "s/{{[ ]*cookiecutter.${evar}[ ]*}}/${evalue}/g")"
    done < <(echo "${new_contents}" | grep -P -o "${grep_epttrn}" | sed "s/${sed_epttrn}/\1/" | sed 's/cookiecutter\.//')
}

function get_start_line() {
    mark="$1"; shift
    contents="$1"; shift

    echo "${contents}" | grep -n "${mark}" | awk -F':' '{print $1}'
}

function editor_cmd() {
    start_line="$1"; shift
    mode="$1"; shift
    full_target="$1"; shift

    if [[ "${EDITOR}" == *"vim"* ]]; then
        Vim_Opts=()
        if [[ -n "${start_line}" ]]; then
            Vim_Opts+=( +"${start_line}" )
        fi

        if [[ "${mode}" == "INSERT" ]]; then
            Vim_Opts+=( +startinsert )
        fi
        
        echo "${EDITOR} ${Vim_Opts[*]} ${full_target}"
    else
        echo "${EDITOR} ${full_target}"
    fi
}

if [[ "${SCRIPTNAME}" == "cookie" ]]; then
    main "$@"
fi
